// <auto-generated />
using System;
using BookShop.DAL.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShop.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbcontext))]
    [Migration("20231004075558_ver1.1")]
    partial class ver11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookShop.DAL.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Img")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Id_Supplier")
                        .HasColumnType("int");

                    b.Property<int>("ImportPrice")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("PageSize")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("PublicationDate")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reader")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Widght")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Supplier");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Id_Author")
                        .HasColumnType("int");

                    b.Property<int>("Id_Book")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Author");

                    b.HasIndex("Id_Book");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Id_Book")
                        .HasColumnType("int");

                    b.Property<int>("Id_Genre")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Book");

                    b.HasIndex("Id_Genre");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Cart", b =>
                {
                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id_User");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Product")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Product");

                    b.HasIndex("Id_User");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.CollectionBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CollectionBooks");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.CustomProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Id_Shop")
                        .HasColumnType("int");

                    b.Property<string>("propertyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Shop");

                    b.ToTable("CustomProperties");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Evaluate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Book")
                        .HasColumnType("int");

                    b.Property<int?>("Id_Parents")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Book");

                    b.HasIndex("Id_Parents");

                    b.HasIndex("Id_User");

                    b.ToTable("Evaluates");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Category")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Category");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.RoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.UserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.UserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.UserTokens", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "UserId", "Name");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Product")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Product");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AcceptDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(13)");

                    b.Property<int?>("Commune")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("District")
                        .HasColumnType("int");

                    b.Property<int>("Id_Promotion")
                        .HasColumnType("int");

                    b.Property<int>("Id_StatusOrder")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<bool>("IsOnlineOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsePoint")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiNotes")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(13)");

                    b.Property<int?>("PointAmount")
                        .HasColumnType("int");

                    b.Property<int?>("PointUsed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Promotion");

                    b.HasIndex("Id_User");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Id_Order")
                        .HasColumnType("int");

                    b.Property<int>("Id_Product")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Order");

                    b.HasIndex("Id_Product");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.OrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Order")
                        .HasColumnType("int");

                    b.Property<int>("Id_Payment")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("paymentAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Order");

                    b.HasIndex("Id_Payment");

                    b.ToTable("OrderPayments");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.PaymentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentForms");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.PointTransactionsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Parents")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<int>("Point_Amount_Userd")
                        .HasColumnType("int");

                    b.Property<int>("Remaining")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Parents");

                    b.HasIndex("Id_User");

                    b.ToTable("PointTransactionsHistories");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Id_Collection")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Collection");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.ProductBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Id_Book")
                        .HasColumnType("int");

                    b.Property<int>("Id_Product")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Book");

                    b.HasIndex("Id_Product");

                    b.ToTable("ProductBooks");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.ProductPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Product")
                        .HasColumnType("int");

                    b.Property<int>("Id_Promotion")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Product");

                    b.HasIndex("Id_Promotion");

                    b.ToTable("ProductPromotions");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmountReduct")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<int?>("ConversionPoint")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Type")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PercentReduct")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReductMax")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StorageTerm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Type");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.PromotionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PromotionTypes");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.PropertyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Id_Property")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Property");

                    b.ToTable("PropertyValues");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.ReturnOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Order")
                        .HasColumnType("int");

                    b.Property<int?>("Id_OrderDetail")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Order");

                    b.HasIndex("Id_OrderDetail");

                    b.ToTable("ReturnOrders");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.ShiftChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CostIncurred")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Shift")
                        .HasColumnType("int");

                    b.Property<int?>("Id_UserInShift")
                        .HasColumnType("int");

                    b.Property<int?>("Id_UserNxShift")
                        .HasColumnType("int");

                    b.Property<int?>("Id_UserReset")
                        .HasColumnType("int");

                    b.Property<string>("IncurredNote")
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("IntialAmount")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ResetTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TotalCash")
                        .HasColumnType("int");

                    b.Property<int?>("TotalCashPreShift")
                        .HasColumnType("int");

                    b.Property<int?>("TotalCredit")
                        .HasColumnType("int");

                    b.Property<int?>("TotalMoneyEarn")
                        .HasColumnType("int");

                    b.Property<int?>("TotalWithDrawn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Shift");

                    b.HasIndex("Id_UserInShift");

                    b.HasIndex("Id_UserNxShift");

                    b.HasIndex("Id_UserReset");

                    b.ToTable("ShiftChanges");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.StatusOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("StatusOrders");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.UserPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Promotion")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<int>("ReduceMax")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Promotion");

                    b.HasIndex("Id_User");

                    b.ToTable("UserPromotions");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.UserShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Shift")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Shift");

                    b.HasIndex("Id_User");

                    b.ToTable("UserShifts");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.WalletPoint", b =>
                {
                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id_User");

                    b.ToTable("WalletPoints");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Product")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Product");

                    b.HasIndex("Id_User");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Book", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Supplier", "Supplier")
                        .WithMany("Books")
                        .HasForeignKey("Id_Supplier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.BookAuthor", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("Id_Author")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.BookGenre", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("Id_Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Cart", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("BookShop.DAL.Entities.Cart", "Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.CartDetail", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("Id_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.CustomProperties", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Shop", "Shop")
                        .WithMany("CustomProperties")
                        .HasForeignKey("Id_Shop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Evaluate", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.OrderDetail", "OrderDetail")
                        .WithMany("Evaluates")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Evaluate", "Parents")
                        .WithMany("Evaluates")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BookShop.DAL.Entities.User", "User")
                        .WithMany("Evaluates")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");

                    b.Navigation("Parents");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Genre", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Category", "Category")
                        .WithMany("Genres")
                        .HasForeignKey("Id_Category")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.RoleClaims", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Identity.Role", null)
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.UserLogins", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.User", null)
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.UserRoles", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Identity.Role", null)
                        .WithMany("_RoleUser")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.User", null)
                        .WithMany("_RoleUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.UserTokens", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Image", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("Id_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Order", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Promotion", "Promotion")
                        .WithMany("Orders")
                        .HasForeignKey("Id_Promotion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.StatusOrder", "StatusOrder")
                        .WithMany("Orders")
                        .HasForeignKey("Id_Promotion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("StatusOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.OrderDetail", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Id_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Id_Product")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.OrderPayment", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Order", "Order")
                        .WithMany("OrderPayments")
                        .HasForeignKey("Id_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.PaymentForm", "PaymentForm")
                        .WithMany("OrderPayments")
                        .HasForeignKey("Id_Payment")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentForm");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.PointTransactionsHistory", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Order", "Order")
                        .WithMany("PointTransactionsHistories")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Promotion", "Promotion")
                        .WithMany("PointTransactionsHistories")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.WalletPoint", "WalletPoint")
                        .WithMany("PointTransactionsHistories")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Promotion");

                    b.Navigation("WalletPoint");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Product", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.CollectionBook", "CollectionBook")
                        .WithMany("Products")
                        .HasForeignKey("Id_Collection")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CollectionBook");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.ProductBook", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Book", "Book")
                        .WithMany("ProductBooks")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Product", "Product")
                        .WithMany("ProductBooks")
                        .HasForeignKey("Id_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.ProductPromotion", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Product", "Product")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("Id_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("Id_Promotion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Promotion", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.PromotionType", "PromotionType")
                        .WithMany("Promotions")
                        .HasForeignKey("Id_Type")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PromotionType");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.PropertyValue", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.CustomProperties", "CustomProperties")
                        .WithMany("PropertyValues")
                        .HasForeignKey("Id_Property")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomProperties");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.ReturnOrder", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Order", "Order")
                        .WithMany("ReturnOrders")
                        .HasForeignKey("Id_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.OrderDetail", "Detail")
                        .WithMany("ReturnOrders")
                        .HasForeignKey("Id_OrderDetail")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Detail");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.ShiftChange", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.WorkShift", "WorkShift")
                        .WithMany("ShiftChanges")
                        .HasForeignKey("Id_Shift")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.User", "UserIn")
                        .WithMany("ShiftChangesIn")
                        .HasForeignKey("Id_UserInShift")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BookShop.DAL.Entities.User", "UserNx")
                        .WithMany("ShiftChangesNx")
                        .HasForeignKey("Id_UserNxShift")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BookShop.DAL.Entities.User", "UserReset")
                        .WithMany("ShiftChangesReset")
                        .HasForeignKey("Id_UserReset")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UserIn");

                    b.Navigation("UserNx");

                    b.Navigation("UserReset");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.UserPromotion", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Promotion", "Promotion")
                        .WithMany("UserPromotions")
                        .HasForeignKey("Id_Promotion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.User", "User")
                        .WithMany("UserPromotions")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.UserShift", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.WorkShift", "WorkShift")
                        .WithMany("UserShifts")
                        .HasForeignKey("Id_Shift")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.User", "User")
                        .WithMany("UserShifts")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.WalletPoint", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.User", "User")
                        .WithOne("WalletPoint")
                        .HasForeignKey("BookShop.DAL.Entities.WalletPoint", "Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.WishList", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Product", "Product")
                        .WithMany("WishLists")
                        .HasForeignKey("Id_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("ProductBooks");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Category", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.CollectionBook", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.CustomProperties", b =>
                {
                    b.Navigation("PropertyValues");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Evaluate", b =>
                {
                    b.Navigation("Evaluates");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Identity.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("_RoleUser");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderPayments");

                    b.Navigation("PointTransactionsHistories");

                    b.Navigation("ReturnOrders");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.OrderDetail", b =>
                {
                    b.Navigation("Evaluates");

                    b.Navigation("ReturnOrders");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.PaymentForm", b =>
                {
                    b.Navigation("OrderPayments");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("Images");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductBooks");

                    b.Navigation("ProductPromotions");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Promotion", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PointTransactionsHistories");

                    b.Navigation("ProductPromotions");

                    b.Navigation("UserPromotions");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.PromotionType", b =>
                {
                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Shop", b =>
                {
                    b.Navigation("CustomProperties");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.StatusOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Supplier", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Evaluates");

                    b.Navigation("Orders");

                    b.Navigation("ShiftChangesIn");

                    b.Navigation("ShiftChangesNx");

                    b.Navigation("ShiftChangesReset");

                    b.Navigation("UserLogins");

                    b.Navigation("UserPromotions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserShifts");

                    b.Navigation("WalletPoint")
                        .IsRequired();

                    b.Navigation("WishLists");

                    b.Navigation("_RoleUser");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.WalletPoint", b =>
                {
                    b.Navigation("PointTransactionsHistories");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.WorkShift", b =>
                {
                    b.Navigation("ShiftChanges");

                    b.Navigation("UserShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
